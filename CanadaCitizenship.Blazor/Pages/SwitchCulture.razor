@using System.Globalization
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorageService
@inject IStringLocalizer<SwitchCulture> Loc

<RadzenStack>
    <RadzenTemplateForm TItem="CultureModel" Data="SelectedCulture" Submit="@ApplySwitchCulture">
        <RadzenColumn>
            <RadzenFormField class="w-100" Text="@Loc["CultureOptionFieldText"]" Variant="Variant.Filled">
                <RadzenDropDown Name="CultureOption" TValue="string" ValueProperty="Code" @bind-Value="@SelectedCulture.Code" Data="@AvailableCulture">
                    <Template Context="ctx">@Loc[ctx.LocalizedKey]</Template>
                    <ValueTemplate Context="ctx">@Loc[ctx.LocalizedKey]</ValueTemplate>
                </RadzenDropDown>
            </RadzenFormField>
            <RadzenRequiredValidator Component="CultureOption" Text="@Loc["CultureOptionRequiredText"]" />
        </RadzenColumn>
        <RadzenRow class="mt-1" Gap="1rem" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit">@Loc["SwitchBtn"]</RadzenButton>
            <RadzenButton ButtonType="ButtonType.Reset">@Loc["CancelBtn"]</RadzenButton>
        </RadzenRow>
        
    </RadzenTemplateForm>
</RadzenStack>


@code {
    class CultureModel
    {
        public required string Code { get; set; }
        public string LocalizedKey => string.Concat("Lang_", Code);
    }
    CultureModel SelectedCulture = new CultureModel
        {
            Code = CultureInfo.CurrentCulture.TwoLetterISOLanguageName
        };

    private readonly CultureModel[] AvailableCulture;

    public SwitchCulture()
    {
        AvailableCulture =
        [
            new CultureModel { Code = "fr" },
            new CultureModel { Code = "en" }
        ];
    }

    public async Task ApplySwitchCulture()
    {
        if (SelectedCulture is not null && SelectedCulture.Code != CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
        {
            await LocalStorageService.SetItemAsStringAsync("AppCulture", SelectedCulture.Code);
            Navigation.NavigateTo(Navigation.Uri, true);
        }
    }
}
